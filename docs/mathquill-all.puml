@startuml
skinparam classBackgroundColor White
skinparam classArrowColor Black
skinparam classBorderColor Black
skinparam stereotypeCBackgroundColor Gray

hide circle
hide members

Node <|-- MathElement
' Node <|-- TextBlock
' Node <|-- TextPiece

Digit -u-|> VanillaSymbol

MathCommand -u-|> MathElement
MathBlock -u-|> MathElement
RootMathBlock -u-|> MathBlock
RootTextBlock -u-|> RootMathBlock
Symbol -u-|> MathCommand
Symbol <|-- Variable
Symbol <|-- VanillaSymbol
Symbol <|-- BinaryOperator
Symbol <|-- NonSymbolaSymbol
Symbol <|-- OperatorName

MathCommand <|-- Bracket
MathCommand <|-- SquareRoot
MathCommand <|-- Fraction

BinaryOperator <|-- PlusMinus
BinaryOperator <|-- Inequality
BinaryOperator <|-- Equality
BinaryOperator <|-- neq

MathBlock --u-> CharCmds
MathBlock --u-> LatexCmds
MathBlock .l.> MathCommand

TextField -u-|> EditableField
MathField -u-|> EditableField
TextField .l> MathField
MathField ..> RootMathBlock
StaticMath ..> MathBlock
TextField ...> RootTextBlock
EditableField -u-|> AbstractMathQuill
EditableField -> keystroke
StaticMath -u-|> AbstractMathQuill
AbstractMathQuill -r-> Controller
Controller --> latexMathParser
' Controller ....> MathBlock : root
' Controller ....> Cursor
latexMathParser --|> Parser

Letter -u-|> Variable
class Variable <basicSymbols.js>
class Letter <basicSymbols.js>

Selection -u-|> Fragment
Cursor -u-|> Point
Node ..> Selection
Node ..> Fragment
Node ..> Cursor

class Node <tree.js>
class Fragment <tree.js>
class Point <tree.js>
class Cursor <cursor.js> #Beige
class Selection <cursor.js> #Beige

class Bracket <commands.js>
class SquareRoot <commands.js>
class Fraction <commands.js>

class neq <advancedSymbols.js>

class AbstractMathQuill <publicapi.js> {
    config (opts)
    el()
    text()
    latex(latex)
    html()
    reflow()
    revert()
}

class EditableField <publicapi.js> {
    focus()
    blur()
    write (latex)
    cmd (latex)
    select()
    clearSelection()
    ..
    moveToDirEnd (dir)
    moveToLeftEnd()
    moveToRightEnd()
    ..
    keystroke (key)
    typedText (text)
    dropEmbedded (pageX, pageY, options)
    clickAt (clientX, clientY, target)
    ignoreNextMousedown (fn)
}

class MathField <math.js> #Moccasin {
    -RootBlock : RootMathBlock
    exportLatex()
    renderLatexMath (latex)
    renderLatexText (latex)

}

class StaticMath <math.js> #Moccasin {
    -RootBlock : MathBlock
    +init()
    +latex()
}

class TextField <text.js> #Moccasin {
    -RootBlock : RootTextBlock
}

class Controller <latex.js> #LightBlue {
    writeLatex ï¼ˆlatex)
    renderLatexMath (latex)
    renderLatexText (latex)
}

' -------------------------------------------
class MathElement <math.js>

class RootTextBlock <math.js> #LemonChiffon {
    keystroke (key)
}
class RootMathBlock <math.js> #LemonChiffon
class MathCommand <math.js> #LightGoldenRodYellow {
    +init (ctrlSeq, htmlTemplate, textTemplate)
    +replaces (replacedFragment)
    +isEmpty()
    +parser()
    +createLeftOf (cursor)
    +createBlocks()
    ..
    +placeCursor (cursor)
    +moveTowards (dir, cursor, updown)
    +deleteTowards (dir, cursor)
    +selectTowards (dir, cursor)
    +selectChildren()
    +unselectInto (dir, cursor)
    +seek (pageX, cursor)
}
class BinaryOperator <math.js>
class VanillaSymbol <math.js>
class Symbol <math.js>
class latexMathParser <latex.js>
class Parser <parser.util.js>

class MathBlock <math.js> #LemonChiffon {
    -join(methodName)
    +html()
    +latex()
    +text()
    +keystroke(key, e, ctrlr)
    +moveOutOf(dir, cursor, updown)
    +selectOutOf(dir, cursor)
    +deleteOutOf(dir, cursor)
    +seek(pageX, cursor)
    +chToCmd(ch, options)
    +write(curor, cb)
    +focus()
    +blur()
}

class keystroke <keystroke.js> {
    +backspace()
    +deleteForward()
    -deleteDir (dir)
    -ctrlDeleteDir (dir)
    +moveLeft()
    +moveRight()
    -moveDir (dir)
    +moveUp()
    +moveDown()
    -moveUpDown (self, dir)
}

' class TextBlock <Node>
' class TextPiece <Node>
' LatexCommandInput --> TextBlock
' TextBlock --> TextPiece
' TextBlock ..> Point

' class TextBlock <Node> {
'     replaces (replacedText)
'     createLeftOf (cursor)
'     parser ()
'     textContents ()
'     moveTowards (dir, cursor)
'     moveOutOf (dir, cursor)
'     selectOutOf (dir, cursor)
'     deleteOutOf (dir, cursor)
'     write (cursor, ch)
'     seek (pageX, cursor)
'     blur (cursor)

' }

' class TextPiece <Node> {
'     init (text)
'     appendText (text)
'     prependText (text)
'     insTextAtDirEnd (text, dir)
'     splitRight (i)
'     moveTowards (dir, cursor)
'     deleteTowards (dir, cursor)
'     selectTowards (dir, cursor)
'     latex()
' }

@enduml