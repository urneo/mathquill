@startuml
skinparam classBackgroundColor White
skinparam classArrowColor Black
skinparam classBorderColor Black
skinparam stereotypeCBackgroundColor Gray

hide circle
' hide members

Node -d-> Fragment : children
Selection -u-|> Fragment
MathElement -l-|> Node
MathElement <|-r- MathBlock
MathElement <|-- MathCommand
MathCommand <|-- Symbol
MathCommand ..r.> Parser
Symbol <|-r- VanillaSymbol
Symbol <|-r- BinaryOperator
MathBlock ..> MathCommand
MathBlock --> LatexCmds
MathBlock --> CharCmds

Point <|-- Cursor

class Node <tree.js> {
    -{static} byId = {}
    -jQ = $()
    #parent : int
    #ends = {}
    +children : Fragment
    --
    #jQadd (jQ)
    #jQize (jQ)
    #bubble : iterator
    #postOrder : iterator
    ..
    +uniqueNodeId () : int
    +createDir (dir, cursor)
    +createLeftOf (el)
    +selectChildren (leftEnd, rightEnd)
}
class Fragment <tree.js> {
    -ends = {}
    #init (withDir, oppDir, dir)
    +each : iterator
}
class Selection <cursor.js> {
    #init ()
    +adopt ()
    +clear ()
    +join (methodName)
}

class MathElement <math.js> {
    +finalizeInsert (options, cursor)
}

class MathCommand <math.js> {
    +ctrlSeq : string
    +htmlTemplate : string
    +textTemplate : string
    --
    #init (ctrlSeq, htmlTemplate, textTemplate)
    +html ()
    +latex ()
    ..
    +replaces (replacedFragment)
    +isEmpty ()
    +parser () : Parser
    +createLeftOf (cursor)
    +createBlocks ()
    +placeCursor (cursor)
    +moveTowards (dir, cursor, updown)
    +deleteTowards (dir, cursor)
    +selectTowards (dir, cursor)
    +selectChildren ()
    +unselectInto (dir, cursor)
    +seek (pageX, cursor)
    +numBlocks ()
}

class Symbol {
    +text : string
    -placeCursor : noop
    --
    #init (ctrlSeq, html, text)
    +latex() : ctrlSeq
    +text() : textTemplate
    +isEmpty() : true
    ..
    +parser ()
    +numBlocks ()
    +replaces (replacedFragment)
    +moveTowards (dir, cursor)
    +deleteTowards (dir, cursor)
    +seek (ageX, cursor)
}

class MathBlock <math.js> {
    -join (methodName) : string
    -chToCmd (ch, options) : MathCommand
    ..
    +html () : string
    +text () : string
    +latex () : string
    +write (cursor, ch)
    +keystroke (key, e, ctrlr)
    ..
    +moveOutOf (dir, cursor, updown)
    +selectOutOf (dir, cursor)
    +deleteOutOf (dir, cursor)
    +seek (pageX, cursor)
    ..
    +focus ()
    +blur ()
}

class VanillaSymbol {
    #init (ch, html)
}

class BinaryOperator {
    #init (ctrlSeq, html, text)
}

class Point <tree.js> {
    #parent : int
    #leftward : int
    #rightward : int
}

class Cursor <cursor.js> {
    #init (initParent, options)
    +show ()
    +hide ()
    ..
    +withDirInsertAt (dir, parent, withDir, oppDir)
    +insDirOf (dir, el)
    +insLeftOf (el)
    +insRightOf (el)
    +insAtDirEnd (dir, el)
    +insAtLeftEnd (el)
    +insAtRightEnd (el)
    ..
    +jumpUpDown (from, to)
    +offset ()
    +unwrapGramp ()
    ..
    +startSelection ()
    +endSelection ()
    +select ()
    +clearSelection ()
    +deleteSelection ()
    +replaceSelection ()
}

latexMathParser --|> Parser
latexMathParser .l.> MathBlock

class latexMathParser <latex.js> {
    -string = Parser.string
    -regex = Parser.regex
    -letter = Parser.letter
    -any = Parser.any
    -optWhitespace = Parser.optWhitespace
    -succeed = Parser.succeed
    -fail = Parser.fail
    --
    #variable : Parser
    #symbol : Parser
    #controlSequence : Parser
    #command : Parser
    #mathGroup : Parser
    #mathBlock : Parser
    #mathSequence : Parser
    #optMathBlock : Parser
    ..
    +block = mathBlock
    +optBlock = optMathBlock
}

class Parser <parser.util.js> {
    -letter : regex
    -letters : regex
    -digit : regex
    -digits : regex
    -whitespace : regex
    -optWhitespace : regex
    -_ : body
    -body : function(stream, onSuccess, onFailure)
    --
    #init (body)
    +parse (stream)
    +or (alternative) : Parser
    +then (next) : Parser
    +many () : Parser
    +times (min, max)
    +result (res) : Parser
    ..
    +atMost (n)
    +atLeast (n)
    +map (fn)
    +skip (two)
    ..
    -string (str)
    -regex (re) : Parser
}

@enduml